/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import conexion.ConectionDB;
import controlador.Ctrl_Cliente;
import controlador.Ctrl_Correo;
import controlador.Ctrl_RegistrarVenta;
import controlador.VentaPDF;
import desplazable.Desface;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Modelo_CabeceraVenta;
import modelo.Modelo_DetalleVenta;
import java.io.FileWriter;
import javax.swing.JInternalFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Edward
 */
public class InterFacturacion extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterFacturacion
     */
    String auxImagen = "";
    boolean d = false;
    String ruta = "";
    String correo = "";
    String nombrePDF = "";
    //Modelo de la tabla
    private DefaultTableModel modeloTabla;
    //Lista para detalle
    private ArrayList<Modelo_DetalleVenta> listaProducto = new ArrayList<>();
    private Modelo_DetalleVenta producto;

    private int idCliente = 0;

    private int idMotocicleta;
    private String nombre = "";
    private String cilindraje = "";
    private int cantidadProductoBBDD = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIva = 0;

    private int cantidad = 0;
    private double subtotal = 0.0;
    private double descuento = 0.0;
    private double iva = 0.0;
    private double totalPagar = 0.0;

    //variables para el metodo total a pagar
    private double subtotalGeneral = 0.0;
    private double descuentoGeneral = 0.0;
    private double ivaGeneral = 0.0;
    private double totalPagarGeneral = 0.0;

    private int auxDetalle = 1; //Id del detalle venta
    Desface desplazable;

    public InterFacturacion() {
        initComponents();
        btnRegistrarVenta.setEnabled(false);
        btnGuardar.setEnabled(false);
        this.setSize(new Dimension(800, 600));
        this.setTitle("FACTURACION");
        //this.fondoEtiqueta();
        desplazable = new Desface();
        this.configurarTabla();
        this.txtEfectivo.setEnabled(false);
        this.btnCalcular.setEnabled(false);

        //Mostrar valor de 0 para cada no...
        this.txtSubtotal.setText("0.0");
        this.txtIva.setText("0.0");
        this.txtDescuento.setText("0.0");
        this.txtTotalPagar.setText("0.0");
        this.setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE); //no permite el movimiento del internal
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null); // desactiva la abrra de titulo
    }

    public void adaptar() {
        ImageIcon imagen = new ImageIcon("src/motos/Suzuki-logo.png");
        Icon icono = new ImageIcon(imagen.getImage().getScaledInstance(logoPDF.getWidth(), logoPDF.getHeight(), Image.SCALE_DEFAULT));
        logoPDF.setIcon(icono);
    }

    //Metodo para cargar motocicletas a la tabla;
    public void listaTablaProducto() {
        this.modeloTabla.setRowCount(listaProducto.size());
        for (int i = 0; i < listaProducto.size(); i++) {
            this.modeloTabla.setValueAt(i + 1, i, 0);
            this.modeloTabla.setValueAt(listaProducto.get(i).getNombre(), i, 1);
            this.modeloTabla.setValueAt(listaProducto.get(i).getCilindraje(), i, 2);
            this.modeloTabla.setValueAt(listaProducto.get(i).getCantidad(), i, 3);
            this.modeloTabla.setValueAt(listaProducto.get(i).getPrecioUnitario(), i, 4);
            this.modeloTabla.setValueAt(listaProducto.get(i).getSubTotal(), i, 5);
            this.modeloTabla.setValueAt(listaProducto.get(i).getDescuento(), i, 6);
            this.modeloTabla.setValueAt(listaProducto.get(i).getIva(), i, 7);
            this.modeloTabla.setValueAt(listaProducto.get(i).getPrecioAPagar(), i, 8);
            this.modeloTabla.setValueAt("Eliminar", i, 9);//Añadir un boton eliminar           
        }
        tablaProductos.setModel(modeloTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelVista = new javax.swing.JPanel();
        logoPDF = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel27 = new javax.swing.JLabel();
        lblDireccionpdf = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        lblCedulapdf = new javax.swing.JLabel();
        lblNombrepdf = new javax.swing.JLabel();
        lblTelefonopdf = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        lblTotalpdf = new javax.swing.JLabel();
        lblCantidadpdf = new javax.swing.JLabel();
        lblDescripcionpdf = new javax.swing.JLabel();
        lblPreciopdf = new javax.swing.JLabel();
        panelVenta = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        txtCedula = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        cboMotos = new javax.swing.JComboBox<>();
        btnRegistrarVenta = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        txtDescuento = new javax.swing.JTextField();
        txtIva = new javax.swing.JTextField();
        txtTotalPagar = new javax.swing.JTextField();
        txtEfectivo = new javax.swing.JTextField();
        txtCambio = new javax.swing.JTextField();
        btnCalcular = new javax.swing.JButton();
        btnAñadir = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scrollProducto = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        cboClientes = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblFondo1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelVista.setBackground(new java.awt.Color(255, 255, 255));
        panelVista.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/suzukiPDF.png"))); // NOI18N
        panelVista.add(logoPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 80));

        jLabel11.setFont(new java.awt.Font("Dubai", 0, 11)); // NOI18N
        jLabel11.setText("Nombre: SUZUKI MOTOS SA. CV");
        panelVista.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 170, -1));

        jLabel12.setFont(new java.awt.Font("Dubai", 0, 11)); // NOI18N
        jLabel12.setText("RFC: 098102200406");
        panelVista.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, 100, -1));

        jLabel13.setFont(new java.awt.Font("Dubai", 0, 11)); // NOI18N
        jLabel13.setText("Teléfono: 9541829814");
        panelVista.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 130, -1));

        jLabel14.setFont(new java.awt.Font("Dubai", 0, 11)); // NOI18N
        jLabel14.setText("Dirección: Oaxaca de Juárez");
        panelVista.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 150, -1));

        jLabel15.setFont(new java.awt.Font("Dubai", 0, 11)); // NOI18N
        jLabel15.setText("Razon social: Conquista las calles con tu");
        panelVista.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, 210, -1));

        jLabel16.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 204));
        jLabel16.setText("Nombre:");
        panelVista.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 140, 70, -1));

        jLabel17.setFont(new java.awt.Font("Dubai", 0, 11)); // NOI18N
        jLabel17.setText("motocicleta favorita");
        panelVista.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 140, -1));

        jLabel18.setText("¡Gracias por su compra!");
        panelVista.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 370, 130, -1));

        jLabel19.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 204));
        jLabel19.setText("CEDULA:");
        panelVista.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 110, -1));

        jLabel20.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 204));
        jLabel20.setText("Dirección:");
        panelVista.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, 70, -1));

        jLabel21.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 204));
        jLabel21.setText("Teléfono:");
        panelVista.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 110, -1));

        jLabel26.setText("Datos del cliente");
        panelVista.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 110, -1));
        panelVista.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 360, 80, -1));

        jLabel27.setText("Firma");
        panelVista.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 320, 40, -1));

        lblDireccionpdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblDireccionpdf.setText("\n");
        panelVista.add(lblDireccionpdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 160, 70, -1));

        jLabel29.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel29.setText("\n");
        panelVista.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 160, 70, -1));

        lblCedulapdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblCedulapdf.setText("\n");
        panelVista.add(lblCedulapdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 70, -1));

        lblNombrepdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblNombrepdf.setText("\n");
        panelVista.add(lblNombrepdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 160, 70, -1));

        lblTelefonopdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblTelefonopdf.setText("\n");
        panelVista.add(lblTelefonopdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 70, -1));

        jLabel22.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 204));
        jLabel22.setText("Cantidad:");
        panelVista.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 110, -1));

        jLabel23.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 204));
        jLabel23.setText("Descripción:");
        panelVista.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 70, -1));

        jLabel24.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 204));
        jLabel24.setText("Precio Unitario:");
        panelVista.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 190, 110, -1));

        jLabel25.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 204));
        jLabel25.setText("Precio total:");
        panelVista.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 190, 70, -1));

        lblTotalpdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblTotalpdf.setText("\n");
        panelVista.add(lblTotalpdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 210, 70, -1));

        lblCantidadpdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblCantidadpdf.setText("\n");
        panelVista.add(lblCantidadpdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 70, -1));

        lblDescripcionpdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblDescripcionpdf.setText("\n");
        panelVista.add(lblDescripcionpdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, 70, -1));

        lblPreciopdf.setFont(new java.awt.Font("Dubai", 1, 11)); // NOI18N
        lblPreciopdf.setText("\n");
        panelVista.add(lblPreciopdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 210, 70, -1));

        getContentPane().add(panelVista, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 80, 500, 450));

        panelVenta.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnBuscar.setBackground(new java.awt.Color(204, 204, 204));
        btnBuscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        panelVenta.add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 80, 130, 30));

        txtCedula.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        txtCedula.setForeground(new java.awt.Color(153, 153, 153));
        txtCedula.setText("CURP");
        txtCedula.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCedulaMouseClicked(evt);
            }
        });
        panelVenta.add(txtCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 80, 220, 30));

        txtCantidad.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        txtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadKeyTyped(evt);
            }
        });
        panelVenta.add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 120, 120, 30));

        cboMotos.setBackground(new java.awt.Color(204, 204, 204));
        cboMotos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboMotos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una motocicleta:" }));
        cboMotos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMotosActionPerformed(evt);
            }
        });
        panelVenta.add(cboMotos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 250, 30));

        btnRegistrarVenta.setBackground(new java.awt.Color(204, 204, 255));
        btnRegistrarVenta.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        btnRegistrarVenta.setText("REGISTRAR VENTA");
        btnRegistrarVenta.setHideActionText(true);
        btnRegistrarVenta.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnRegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarVentaActionPerformed(evt);
            }
        });
        panelVenta.add(btnRegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 410, 200, 40));

        btnGuardar.setBackground(new java.awt.Color(204, 204, 255));
        btnGuardar.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        btnGuardar.setText("GUARDAR Y ENVIAR");
        btnGuardar.setHideActionText(true);
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        panelVenta.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 460, 200, 40));

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Subtotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 90, 20));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 110, 20));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Total a pagar:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 140, 20));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Iva:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 40, 20));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, 90, 20));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Cambio:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 170, 80, 20));

        txtSubtotal.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        txtSubtotal.setBorder(new javax.swing.border.MatteBorder(null));
        txtSubtotal.setEnabled(false);
        jPanel2.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 150, 20));

        txtDescuento.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        txtDescuento.setBorder(new javax.swing.border.MatteBorder(null));
        txtDescuento.setEnabled(false);
        jPanel2.add(txtDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 150, 20));

        txtIva.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        txtIva.setBorder(new javax.swing.border.MatteBorder(null));
        txtIva.setEnabled(false);
        jPanel2.add(txtIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 150, 20));

        txtTotalPagar.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        txtTotalPagar.setBorder(new javax.swing.border.MatteBorder(null));
        txtTotalPagar.setEnabled(false);
        jPanel2.add(txtTotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 150, 20));

        txtEfectivo.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        txtEfectivo.setBorder(new javax.swing.border.MatteBorder(null));
        txtEfectivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEfectivoKeyTyped(evt);
            }
        });
        jPanel2.add(txtEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 150, 20));

        txtCambio.setFont(new java.awt.Font("Dubai", 1, 14)); // NOI18N
        txtCambio.setBorder(new javax.swing.border.MatteBorder(null));
        txtCambio.setEnabled(false);
        jPanel2.add(txtCambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 150, 20));

        btnCalcular.setBackground(new java.awt.Color(19, 19, 36));
        btnCalcular.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        btnCalcular.setText("CALCULAR");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });
        jPanel2.add(btnCalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 120, 140, 40));

        panelVenta.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 460, 210));

        btnAñadir.setBackground(new java.awt.Color(204, 204, 204));
        btnAñadir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAñadir.setText("Añadir");
        btnAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirActionPerformed(evt);
            }
        });
        panelVenta.add(btnAñadir, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 120, 130, 30));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaProductos.setBackground(new java.awt.Color(153, 153, 255));
        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductosMouseClicked(evt);
            }
        });
        scrollProducto.setViewportView(tablaProductos);

        jPanel1.add(scrollProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        panelVenta.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 760, 210));

        cboClientes.setBackground(new java.awt.Color(204, 204, 204));
        cboClientes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cboClientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un cliente:" }));
        cboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClientesActionPerformed(evt);
            }
        });
        panelVenta.add(cboClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 250, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Cantidad:");
        panelVenta.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 120, 120, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Motocicleta:");
        panelVenta.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 120, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        panelVenta.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 120, 30));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Venta");
        panelVenta.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 0, -1, -1));

        lblFondo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FONDO9.jpg"))); // NOI18N
        panelVenta.add(lblFondo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 760));

        getContentPane().add(panelVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 760));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        if (!txtCedula.getText().isEmpty()) {
            String aux = txtCedula.getText();
            String aux2 = Ctrl_Cliente.buscarCliente(aux);
            cboClientes.setSelectedItem(aux2);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirActionPerformed
        String combo = "" + cboMotos.getSelectedItem();
        String cliente = "" + cboClientes.getSelectedItem();
        if (!cliente.equals("Seleccione un cliente:")) {
            //validar seleccion
            if (combo.equalsIgnoreCase("Selecciona una motocicleta:")) {
                JOptionPane.showMessageDialog(null, "Selecciona una opcion");
            } else {
                if (!combo.equals("Seleccione una motocicleta:")) {
                    if (!txtCantidad.getText().isEmpty()) {
                        boolean validar = this.validarTxtNotNumber(txtCantidad.getText());
                        if (validar) {
                            int aux = Integer.parseInt(txtCantidad.getText());
                            if (aux > 0) {
                                cantidad = aux;
//                        System.out.println("Cantidad  de Stock");
//                        System.out.println(cantidad);
                                this.datosDelProducto();

                                //Validar que no exceda Stock
                                if (cantidad < cantidadProductoBBDD) {
                                    subtotal = cantidad * precioUnitario;
                                    totalPagar = subtotal + iva - descuento;

                                    //redondear decimales
                                    subtotal = (double) Math.round(subtotal * 100) / 100;
                                    iva = (double) Math.round(iva * 100) / 100;
                                    descuento = (double) Math.round(descuento * 100) / 100;
                                    totalPagar = (double) Math.round(totalPagar * 100) / 100;

                                    //Crear un nuevo producto
                                    producto = new Modelo_DetalleVenta(auxDetalle,
                                            1,
                                            idMotocicleta,
                                            nombre,
                                            cilindraje,
                                            cantidad,
                                            precioUnitario,
                                            subtotal,
                                            descuento,
                                            iva,
                                            totalPagar);

                                    //Añadir productos add
                                    listaProducto.add(producto);
                                    lblCantidadpdf.setText(txtCantidad.getText());
                                    JOptionPane.showMessageDialog(null, "La motocicleta se añadio a la lista");
                                    auxDetalle++;
                                    txtCambio.setText(null);
                                    this.calcularTotalPagar();
                                    txtEfectivo.setEnabled(true);
                                    btnCalcular.setEnabled(true);

                                } else {
                                    JOptionPane.showMessageDialog(null, "No hay suficientes modelos de esa motocicleta");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Ingresa valores mayor a 0");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Ingresa numeros solamente");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Ingresa una cantidad");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Seleccione una motocicleta");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione u cliente primero");
        }
        this.listaTablaProducto();
    }//GEN-LAST:event_btnAñadirActionPerformed

    public void buscarDatos(String n) {
        try {
            String sql = "Select * from cliente where concat(nombre,' ',apellido) ='" + cboClientes.getSelectedItem() + "';";
            Connection cx = ConectionDB.conectar();
            Statement st;
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                String cedula = rs.getString("cedula");
                String telefono = rs.getString("telefono");
                String direccion = rs.getString("direccion");
                correo = rs.getString("correo");
                lblCedulapdf.setText(cedula);
                lblDireccionpdf.setText(direccion);
                lblTelefonopdf.setText(telefono);

                //
            }
        } catch (SQLException e) {
            System.out.println("Error al consultar datos:" + e);
        }
    }
    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        if (!txtEfectivo.getText().isEmpty()) {
            //Validar que los caracteres no numericos         
            if (validarTxt(txtEfectivo.getText())) {
                Double efc = Double.parseDouble(txtEfectivo.getText().trim());
                Double toPa = Double.parseDouble(txtTotalPagar.getText().trim());
                if (efc < toPa) {
                    JOptionPane.showMessageDialog(null, "Dinero insufisiente");
                } else {
                    double cambio = (efc - toPa);
                    double cambie = (double) Math.round(cambio * 100) / 100;
                    txtCambio.setText(String.valueOf(cambie));
                    lblPreciopdf.setText(txtSubtotal.getText());
                    lblTotalpdf.setText(txtTotalPagar.getText());
                    btnRegistrarVenta.setEnabled(true);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Solo se admiten caracteres numericos");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad para realizar los calculos");
        }
    }//GEN-LAST:event_btnCalcularActionPerformed

    int idArrayList = 0;
    private void tablaProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductosMouseClicked
        int fila_poin = tablaProductos.rowAtPoint(evt.getPoint());
        int columna_point = 0;

        if (fila_poin > -1) {
            idArrayList = (int) modeloTabla.getValueAt(fila_poin, columna_point);
        }

        int opcion = JOptionPane.showConfirmDialog(null, "¿Deseas eliminar el Producto?");

        switch (opcion) {
            case 0://Si aprieta 0
                listaProducto.remove(idArrayList - 1);
                this.calcularTotalPagar();
                this.listaTablaProducto();
                break;

            case 1: //Si aprieta 1
                break;
            default://Si aprieta 2 o 1
                break;
        }
    }//GEN-LAST:event_tablaProductosMouseClicked
    public String guardarComo() {
        JFileChooser fc = new JFileChooser();
        String aux = "";
        File fichero = null;
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.PDF", "pdf");

//Le indicamos el filtro
        fc.setFileFilter(filtro);
//Abrimos la ventana, guardamos la opcion seleccionada por el usuario
        int seleccion = fc.showSaveDialog(this);

//Si el usuario, pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //Seleccionamos el fichero
            fichero = fc.getSelectedFile();
            if (!fichero.getAbsolutePath().endsWith(".pdf")) {
                fichero = new File(fichero.getAbsolutePath() + ".pdf");
            }
            nombrePDF = fichero.getName();
            aux = "" + fichero;
            try (FileWriter fw = new FileWriter(fichero)) {
                JOptionPane.showMessageDialog(null, "Guardado exitosamente");
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }

        ruta = aux;
        //nombre=;
        return aux;
    }
    private void btnRegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarVentaActionPerformed

        Modelo_CabeceraVenta cabVenta = new Modelo_CabeceraVenta();
        Modelo_DetalleVenta detVenta = new Modelo_DetalleVenta();
        Ctrl_RegistrarVenta regVenta = new Ctrl_RegistrarVenta();

        String fecha_actual = "";
        Date date = new Date();
        fecha_actual = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (listaProducto.size() > 0) {

            //Metodo para obtener el idCliente
            this.obtenerIDCliente();
            //Registrar cabecera
            cabVenta.setIdCabecera(0);
            cabVenta.setIdCliente(idCliente);
            cabVenta.setTotalPagar(Double.parseDouble(txtTotalPagar.getText()));
            cabVenta.setFecha_Venta(fecha_actual);

            if (regVenta.guardarCabeceraVenta(cabVenta)) {

                //Generar comprobante
                //Guardar detalle venta
                for (Modelo_DetalleVenta elemento : listaProducto) {
                    detVenta.setIdDetalleVenta(0);
                    detVenta.setIdCabeceraVenta(0);
                    detVenta.setIdMotocicletas(elemento.getIdMotocicletas());
                    detVenta.setCantidad(elemento.getCantidad());
                    detVenta.setPrecioUnitario(elemento.getPrecioUnitario());
                    detVenta.setSubTotal(elemento.getSubTotal());
                    detVenta.setDescuento(elemento.getDescuento());
                    detVenta.setIva(elemento.getIva());
                    detVenta.setPrecioAPagar(elemento.getPrecioAPagar());

                    if (regVenta.guardarDetalleVenta(detVenta)) {
                        System.out.println("Registrado con exito");
                        btnGuardar.setEnabled(true);
                        txtSubtotal.setText("0.0");
                        txtDescuento.setText("0.0");
                        txtTotalPagar.setText("0.0");
                        txtIva.setText("0.0");
                        txtEfectivo.setText("0.0");
                        txtCambio.setText("0.0");
                        auxDetalle = 1;

                        this.restarStockProductos(elemento.getIdMotocicletas(), elemento.getCantidad());

                    } else {
                        JOptionPane.showMessageDialog(null, "Error al guardar detalle venta...");
                    }
                }

                //Vaciamos la lista
                //this.listaProducto.clear();
                //this.listaTablaProducto();
            } else {
                JOptionPane.showMessageDialog(null, "Error al guardar cabecera de venta...");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Agregue un producto a la lista");
        }

    }//GEN-LAST:event_btnRegistrarVentaActionPerformed

    private void txtCedulaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCedulaMouseClicked
        txtCedula.setText("");
        txtCedula.setForeground(new Color(0, 0, 0));// TODO add your handling code here:
    }//GEN-LAST:event_txtCedulaMouseClicked

    private void cboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClientesActionPerformed
        String m = "" + cboClientes.getSelectedItem();
        if (!m.equals("Seleccione un cliente:")) {
            lblNombrepdf.setText("" + cboClientes.getSelectedItem());
            buscarDatos(lblNombrepdf.getText());
        } else {
            lblCedulapdf.setText("");
            lblNombrepdf.setText("");
            lblTelefonopdf.setText("");
            lblDireccionpdf.setText("");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_cboClientesActionPerformed

    private void cboMotosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMotosActionPerformed
        String c = "" + cboMotos.getSelectedItem();
        if (!c.equals("Seleccione una motocicleta:")) {
            lblDescripcionpdf.setText("" + cboMotos.getSelectedItem());
        } else {
            lblDescripcionpdf.setText("");
        }
    }//GEN-LAST:event_cboMotosActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        VentaPDF pdf = new VentaPDF();
        pdf.datosCliente(idCliente);
        pdf.generarFacturaPDF(guardarComo());
        Ctrl_Correo c = new Ctrl_Correo();
        c.sendPDF(correo, ruta, nombrePDF);

        this.limpiar();
        this.listaProducto.clear();
        this.listaTablaProducto();
// TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadKeyTyped
        char c = evt.getKeyChar();
        // Verifica si el carácter no es un número
        if (!Character.isDigit(c)) {
            // Si no es un número, consume el evento para prevenir la entrada
            evt.consume();
        }              // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadKeyTyped

    private void txtEfectivoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEfectivoKeyTyped
        char c = evt.getKeyChar();
        // Verifica si el carácter no es un número
        if (!Character.isDigit(c)) {
            // Si no es un número, consume el evento para prevenir la entrada
            evt.consume();
        }              // TODO add your handling code here:
    }//GEN-LAST:event_txtEfectivoKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadir;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnRegistrarVenta;
    private javax.swing.JComboBox<String> cboClientes;
    private javax.swing.JComboBox<String> cboMotos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCantidadpdf;
    private javax.swing.JLabel lblCedulapdf;
    private javax.swing.JLabel lblDescripcionpdf;
    private javax.swing.JLabel lblDireccionpdf;
    private javax.swing.JLabel lblFondo1;
    private javax.swing.JLabel lblNombrepdf;
    private javax.swing.JLabel lblPreciopdf;
    private javax.swing.JLabel lblTelefonopdf;
    private javax.swing.JLabel lblTotalpdf;
    private javax.swing.JLabel logoPDF;
    private javax.swing.JPanel panelVenta;
    private javax.swing.JPanel panelVista;
    public static javax.swing.JScrollPane scrollProducto;
    public static javax.swing.JTable tablaProductos;
    private javax.swing.JTextField txtCambio;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtEfectivo;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtSubtotal;
    public static javax.swing.JTextField txtTotalPagar;
    // End of variables declaration//GEN-END:variables

    //Metodo asignar Imagen Moto
    //Metodo para llenar el comboBox clientes
    public void cargarCBOClientes() {
        cboClientes.removeAllItems();
        cboClientes.addItem("Seleccione un cliente:");
        Connection cx = ConectionDB.conectar();
        String sql = "select *from cliente";
        Statement st;

        try {
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cboClientes.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }
            cx.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar clientes al comboBox " + e);
        }
    }

    //Metodo para llenar el comboBox
    public void cargarCBOMotos() {
        cboMotos.removeAllItems();
        cboMotos.addItem("Seleccione una motocicleta:");
        Connection cx = ConectionDB.conectar();
        String sql = "select *from producto";
        Statement st;

        try {
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cboMotos.addItem(rs.getString("nombre"));
            }
            cx.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar motocicleta al comboBox " + e);
        }
    }

    public void limpiar() {
        cboClientes.setSelectedIndex(0);
        cboMotos.setSelectedIndex(0);
        txtCambio.setText(null);
        txtCantidad.setText(null);
        txtCambio.setText(null);
        txtIva.setText(null);
        txtSubtotal.setText(null);
        txtDescuento.setText(null);
        txtTotalPagar.setText(null);
        lblCantidadpdf.setText(null);
        lblNombrepdf.setText(null);
        lblDescripcionpdf.setText(null);
        lblCedulapdf.setText(null);
        lblDireccionpdf.setText(null);
        lblTelefonopdf.setText(null);
    }

    //Metodo para cargar la tabla productos
    public void configurarTabla() {
        modeloTabla = new DefaultTableModel();
        //Añadir columnas
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Cilindraje");
        modeloTabla.addColumn("Cantidad");
        modeloTabla.addColumn("P. Unitario");
        modeloTabla.addColumn("Subtotal");
        modeloTabla.addColumn("Descuento");
        modeloTabla.addColumn("Iva");
        modeloTabla.addColumn("Total a pagar");
        modeloTabla.addColumn("Accion");

        //Agregar datos al modelo tabla
        tablaProductos.setModel(modeloTabla);

    }

    //Validar numerosEn los textField
    public boolean validarTxt(String aux) {

        try {
            double entero = Double.parseDouble(aux);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Validar numerosEn los textField
    public boolean validarTxtNotNumber(String aux) {

        try {
            int entero = Integer.parseInt(aux);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Metodo para mostrar los productos seleccionados
    public void datosDelProducto() {
        try {
            String sql = "select * from producto where nombre='" + cboMotos.getSelectedItem() + "';";
            Connection cx = ConectionDB.conectar();
            Statement st;
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                idMotocicleta = rs.getInt("id_motocicleta");
                nombre = rs.getString("nombre");
                cilindraje = rs.getString("cilindraje");
                cantidadProductoBBDD = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");
                this.calcularIva(precioUnitario, porcentajeIva);

                //
            }
        } catch (SQLException e) {
            System.out.println("Error al consultar datos:" + e);
        }
    }

    //Calcular IVA
    private Double calcularIva(Double precio, int porcentajeIva) {
        int p_iva = porcentajeIva;
        switch (p_iva) {
            case 0:
                iva = 0.0;
                break;
            case 12:
                iva = precio * 0.12;
                break;
            case 16:
                iva = precio * 0.16;
                break;
            default:
                break;
        }
        //redondear el IVa
        iva = (double) Math.round(iva * 100) / 100;
        return iva;
    }

    //Metodo de Calcular total a pagar todos los productos
    private void calcularTotalPagar() {
        subtotalGeneral = 0;
        ivaGeneral = 0;
        descuentoGeneral = 0;
        totalPagarGeneral = 0;

        for (Modelo_DetalleVenta detalle : listaProducto) {
            subtotalGeneral += detalle.getSubTotal();
            descuentoGeneral += detalle.getDescuento();
            ivaGeneral += detalle.getIva();
            totalPagarGeneral += detalle.getPrecioAPagar();
        }

        //Redondear decimales
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        ivaGeneral = (double) Math.round(ivaGeneral * 100) / 100;
        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
        totalPagarGeneral = (double) Math.round(totalPagarGeneral * 100) / 100;

        //Enviar datos a la vista
        txtSubtotal.setText(String.valueOf(subtotalGeneral));
        txtIva.setText(String.valueOf(ivaGeneral));
        txtDescuento.setText(String.valueOf(descuentoGeneral));
        txtTotalPagar.setText(String.valueOf(totalPagarGeneral));

    }

    //Metodo para obtener el ID cliente
    private void obtenerIDCliente() {
        try {
            String sql = "Select * from cliente where concat(nombre,' ',apellido) ='" + this.cboClientes.getSelectedItem() + "';";
            Connection cx = ConectionDB.conectar();
            Statement st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                idCliente = rs.getInt("idCliente");
            }

        } catch (SQLException e) {
            System.out.println("Ocurrio un error al obtener el ID cliente " + e);
        }
    }

    //Metodo para restar Stock de los productos
    private void restarStockProductos(int idMoto, int cantidad) {
        int cantidadProductosBDD = 0;

        try {
            Connection cx = ConectionDB.conectar();
            String sql = "select id_motocicleta, cantidad from producto where id_motocicleta='" + idMoto + "';";
            Statement st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                cantidadProductosBDD = rs.getInt("cantidad");
            }
            cx.close();

        } catch (SQLException e) {
            System.out.println("Error al restar cantidad 1 " + e);
        }

        try {
            Connection cx = ConectionDB.conectar();
            PreparedStatement st = cx.prepareStatement("update producto  set cantidad=? where id_motocicleta='" + idMoto + "'");
            int nuevaCantidad = cantidadProductosBDD - cantidad;
            st.setInt(1, nuevaCantidad);

            if (st.executeUpdate() > 0) {
                System.out.println("Se actualizo el Stock");
            }
            cx.close();

        } catch (SQLException e) {
            System.out.println("Error al restar cantidad 2 " + e);
        }
    }
}
