/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package vista;

import conexion.ConectionDB;
import java.sql.Connection;
import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JInternalFrame;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author jc389
 */
public class Graficos extends javax.swing.JInternalFrame {
//String nombre="";
    /**
     * Creates new form Graficos
     */
    public Graficos() {
        initComponents();
        //limpiar();
        panelLineChart.setVisible(false);
        this.setClosable(false);
        this.setIconifiable(false);
        this.setDefaultCloseOperation(JInternalFrame.DO_NOTHING_ON_CLOSE); //no permite el movimiento del internal
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null); // desactiva la abrra de titulo
    
    }
      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLineChart = new javax.swing.JPanel();
        cboMeses = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelLineChart.setLayout(new java.awt.BorderLayout());
        getContentPane().add(panelLineChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 40, 600, 600));

        cboMeses.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cboMeses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione un mes:", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        cboMeses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMesesActionPerformed(evt);
            }
        });
        getContentPane().add(cboMeses, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 210, 30));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 350, 260));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboMesesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMesesActionPerformed
         String aux = "" + cboMeses.getSelectedItem();
        if (aux.equalsIgnoreCase("enero"))
        {
            mes = "01";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("febrero"))
        {
            mes = "02";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("marzo"))
        {
            mes = "03";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("abril"))
        {
            mes = "04";
            calculardias();
           GraficaLineal();
        } else if (aux.equalsIgnoreCase("mayo"))
        {
            mes = "05";
            calculardias();
                GraficaLineal();
        } else if (aux.equalsIgnoreCase("Junio"))
        {
            mes = "06";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("julio"))
        {
            mes = "07";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("agosto"))
        {
            mes = "08";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("septiembre"))
        {
            mes = "09";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("octubre"))
        {
            mes = "10";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("noviembre"))
        {
            mes = "11";
            calculardias();
            GraficaLineal();
        } else if (aux.equalsIgnoreCase("diciembre"))
        {
            mes = "12";
            calculardias();
            GraficaLineal();
        }

    }//GEN-LAST:event_cboMesesActionPerformed
    
    
    String nombre = "";
    String mes = "";
    String diaF;

    public void calculardias() {
        if (mes.equals("01") || mes.equals("03") || mes.equals("05") || mes.equals("07") || mes.equals("08") || mes.equals("10") || mes.equals("12"))
        {
            diaF = "31";
        } else if (mes.equals("02"))
        {
            diaF = "28";
        } else
        {
            diaF = "30";
        }
        //System.out.println("" + diaF);
    }

    public void GraficaLineal() {
        panelLineChart.setVisible(true);
        //create dataset for the graph
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        Connection cx = ConectionDB.conectar();
        String sql = "SELECT d.idProducto, SUM(d.Cantidad) AS totalCantidad "
                + "FROM detalle_venta d "
                + "JOIN venta v ON d.idVenta = v.idVenta "
                + "WHERE v.fecha BETWEEN   '2024-" + mes + "-01' and '2024-" + mes + "-" + diaF + "'"
                + "GROUP BY d.idProducto "
                + "ORDER BY d.idProducto";

        Statement st;
        int contador = 0;
        try
        {
            st = cx.createStatement();

            ResultSet rs = st.executeQuery(sql);
            while (rs.next())
            {
                int idProducto = rs.getInt("idProducto");
                int totalCantidad = rs.getInt("totalCantidad");

                dataset.setValue(totalCantidad, "Amount", buscarId(idProducto));

            }
            cx.close();
        } catch (SQLException e)
        {
            System.out.println("Error al cargar motocicleta al comboBox " + e);
        }

        JFreeChart linechart = ChartFactory.createLineChart("Motos m√°s vendidas durante el mes de : " + cboMeses.getSelectedItem()  , "MODELOS", "Cantidad",
                dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot lineCategoryPlot = linechart.getCategoryPlot();
        lineCategoryPlot.setBackgroundPaint(Color.white);
        LineAndShapeRenderer lineRenderer = (LineAndShapeRenderer) lineCategoryPlot.getRenderer();
        Color lineChartColor = new Color(0, 0, 204);
        lineRenderer.setSeriesPaint(0, lineChartColor);
        ChartPanel lineChartPanel = new ChartPanel(linechart);
        panelLineChart.removeAll();
        panelLineChart.add(lineChartPanel, BorderLayout.CENTER);
        panelLineChart.validate();
    }

    

    public String buscarId(int id) {
        try
        {
            String sql = "select * from producto where id_motocicleta='" + id + "';";
            Connection cx = ConectionDB.conectar();
            Statement st;
            st = cx.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next())
            {

                nombre = rs.getString("nombre");

                //
            }
        } catch (SQLException e)
        {
            System.out.println("Error al consultar datos:" + e);
        }
        return nombre;
    }
     
    
public void limpiar(){
            DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    dataset.setValue(0, "Amount", "");
    
        JFreeChart linechart = ChartFactory.createLineChart("", "MODELOS", "Cantidad",
                dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot lineCategoryPlot = linechart.getCategoryPlot();
        lineCategoryPlot.setBackgroundPaint(Color.white);
        LineAndShapeRenderer lineRenderer = (LineAndShapeRenderer) lineCategoryPlot.getRenderer();
        Color lineChartColor = new Color(0, 0, 204);
        lineRenderer.setSeriesPaint(0, lineChartColor);
        ChartPanel lineChartPanel = new ChartPanel(linechart);
        panelLineChart.removeAll();
        panelLineChart.add(lineChartPanel, BorderLayout.CENTER);
        panelLineChart.validate();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboMeses;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panelLineChart;
    // End of variables declaration//GEN-END:variables
}
